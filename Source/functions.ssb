## A function to trim leading and trailing spaces from a string.
DEFine FuNction Trim$(text$)
    IF text$ <> "" THEN
        RETurn RTrim$(LTrim$(text$))
    ELSE
        RETurn ""
    END IF
END DEFine LTrim$
:
:
## A function to trim leading spaces from a string.
DEFine FuNction LTrim$(text$)
    LOCal x, ret$
    :
    ## Empty strings are easy!
    IF text$ = "" THEN RETurn "": END IF
    :
    ## Check for leading spaces.
    FOR x = 1 to LEN(text$)
        if text$(x) <> " " THEN EXIT x: END IF
    END FOR x
    ret$ = text$(x TO)
    ## If the result is a single space, we had a
    ## string that is all spaces.
    if ret$ = " " then ret$ = "": end if
    return ret$
END DEFine LTrim$
:
:
## A function to trim trailing spaces from a string.
DEFine FuNction RTrim$(text$)
    LOCal x, ret$
    :
    ## Empty strings are easy!
    IF text$ = "" THEN RETurn "": END IF
    :
    ## Check for trailing spaces.
    FOR x = LEN(text$) TO 1 STEP -1
        if text$(x) <> " " THEN EXIT x: END IF
    END FOR x
    ret$ = text$(TO x)
    ## If the result is a single space, we had a
    ## string that was all spaces.
    if ret$ = " " then ret$ = "": end if
    return ret$
END DEFine RTrim$

## ND-272e
## A procedure to centre some text in a 300 pixel wide
## window. Characters are assumed to be 6 pixels wide as
## testing showed that this worked. The border is 2 pixels
## wide also, this has to be doubled.
DEFine PROCedure centre(ch, text$)
    LOCal size, winSize
    :
    winSize = (300-2-2)/6
    size = len(text$)
    print #ch, to (winSize-size)/2; text$
END DEF centre
:
:
## Function inString%
##   ND-272c
##   A function to determine if we found
##   a REMark or invisible REMark characters
##   within a string. We don't want to be
##   messing up the user's data!
##
##   ND-272F
##   Modified to return the closing quote index
##   if in a string, or zero if not.

DEFine FuNction inString% (in$, stopHere)
  local x, Double%, Single%,quote$(1)
  Double% = 0: Single% = 0
  FOR x = 1 to stopHere
    ** Check for double quotes.
    if in$(x) = '"' THEN
      if Double% = 1 then
        Double% = 0
      else
        Double% = 1
      end if
    else
      ** Try single quotes.
      if in$(x) = "'" then
        if Single% = 1 then
          Single% = 0
        else
          Single% = 1
        end if
      end if
    end if
  END FOR x
:
  ** If Double% or Single% = 1 then
  ** we opened a string before the
  ** marker characters for REMark or
  ** invisible REMark, so we return
  ** true, else false.
  IF Double% + Single% = 0 THEN RETurn 0: END IF

  ** Now look for the terminating quote
  IF Double% THEN 
    quote$ = '"'
  ELSE 
    quote$ = "'"
  END IF

  FOR x = stopHere TO LEN(in$)
    IF in$(x) = quote$ THEN RETurn x: END IF
  END FOR x
END DEFine inString%


## Function stripTab$
##   Replaces any hard tab characters in the line
##   with a single space. Hard tabs (CHR$(9) cause
##   non-REMark lines to "MISTake" on loading.
##   ND-272F.
DEFine FuNction stripTab$ (a$)
  LOCal x, loop

  IF a$ = "" THEN return a$: END IF
  REPeat loop
    x = CHR$(9) INSTR a$
    IF x = 0 THEN EXIT loop: END IF
    IF x = 1 THEN
       ** SMSQ Bug workaround. See ssbpass2_ssb for details.
       a$ = " " & a$(2 TO)
       NEXT loop
    END IF

    a$ = a$(TO x-1) & " " & a$(x + 1 TO)
  END REPeat loop

  RETurn a$
END DEFine stripTab$


## Function joinLine$
##   When a line continuation flag is found at the end
##   of a line, we come here to join as many continuation
##   lines as necessary. The completely joined line is
##   returned for further processing.
##   ND-272F.
DEFine FuNction joinLine$(a$)
  LOCal in$(2048),out$(2048), joinLoop, temp
  :
  out$ = a$ ## Entire line, including "\".
  REPeat joinloop
    IF NOT out$(LEN(out$)) = "\" THEN EXIT joinLoop: END IF

    ## No need for EOF check because we would have
    ## caught it in pass_one.
    INPUT #file_num,in$
    temp = first_char(in$)
    out$ = rtrim$(out$(TO (LEN(out$)-1))) & " " & in$(temp TO)
  END REPeat joinloop

  RETurn out$
END DEFine joinLine$

## Function stripComment$
##   Strips invisible comments from a line, but
##   not if they appear in a string. Everything after
##   the first ## is stripped off.
##   ND-272F.
DEFine FuNction stripComment$(a$)
  LOCal in$, out$, stripLoop, temp, whereQuote
  :
  in$ = a$
  out$ = ""  

  ** Quick test for start of line.
  IF comm$ INSTR in$ = 1 THEN 
    RETURN out$
  END IF

  REPeat stripLoop
    temp = comm$ INSTR in$
    IF temp = 0 THEN
      out$ = out$ & in$
      EXIT stripLoop
    END IF

    ** If not in a string, strip to the end.
    whereQuote = inString%(in$, temp)
    IF NOT whereQuote THEN
      out$ = out$ & in$(1 TO temp - 1)
      EXIT stripLoop
    END IF

    ** Must be in a string, so extend out$ and try again.
    out$ = in$(1 to whereQuote)
    in$ = in$(whereQuote + 1 TO)
  END REPeat stripLoop

  RETurn out$
END DEFine stripComment$

## Function doRemark$
##   Convert a double asterisk, which is not in a string, 
##   into a REMark. 
##   ND-272F.
DEFine FuNction doRemark$(a$)
  LOCal in$(2048), out$(2048), remarkLoop, temp
  :
  in$ = a$
  out$ = ""

  ** Quick test for start of line.
  IF rem$ INSTR in$ = 1 THEN 
    RETURN "REMark" & in$(3 TO)
  END IF

  REPeat remarkLoop
    temp = rem$ INSTR in$

    ## No more? We are done.
    IF temp = 0 THEN
      out$ = out$ & in$
      EXIT remarkLoop
    END IF
      
    ** If not in a string, replace it & exit as 
    ** anything after it is part of the REMark.
    whereQuote = inString%(in$, temp)
    IF NOT whereQuote THEN
      out$ = out$ & in$(TO temp - 1) & "REMark" & in$(temp + 2 TO)
      EXIT remarkLoop
    END IF

    ** Must be in a string, so extend out$ and try again.
    out$ = out$ & in$(1 to whereQuote)
    in$ = in$(whereQuote + 1 TO)
  END REPeat remarkLoop

  RETurn out$
END DEFine doRemark$
