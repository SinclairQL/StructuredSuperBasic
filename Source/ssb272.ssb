## Structured SuperBasic Filter
## Author:       Timothy Swenson
## Date Created: 16 Oct 1990
## Date Revised: 4 Oct 2021
##             : 4 Jul 2024 Norman Dunbar
## Version:      2.7.2d
##
##   This program takes in SSB code and outputs a file
##     that is runnable in SuperBasic
##
## Requires:  Environment Variables (env_bin)
##            TURBO Toolkit (TTK) 3f32
##            ToolKit II (TKII)
##
## Default values:
##    Number of Labels    30
##    Length of Labels    16
##    Input File Ext.     _ssb
##    Output File Ext.    _bas
##    Working Dir.        (blank)
##    2nd Working Dir.    (blank)
##    Line Num. Start     1000
##    Line Num. Delta     10
##    BAS Overwrite       (blank)
##    Language            English ("E")
##    Ignore Blank lines  Y
##
##   Channels :
##               3 - Screen
##               4 - Input File
##               5 - Output File
##

## TURBO Defines

## ONLY CHANGE THIS LINE WHEN AMENDING THE SOURCE 
## FOR A NEW VERSION. 
TURBO_taskn "ssb 2.7.2e"

## DO NOT CHANGE THE OBJFIL NAME.
TURBO_objfil "dev7_ssb272_exe"
TURBO_windo 0
TURBO_repfil "dev7_ssb272_err"
TURBO_objdat 400
TURBO_buffersz 400
TURBO_optim 0
TURBO_diags 2
TURBO_locstr 1
TURBO_struct 0

IMPLICIT% d_labels, d_length, d_start, d_delta, label_var, define_var
IMPLICIT% num_count, file_num, x, y, temp, line_num_d, line_delta
IMPLICIT% line_num


## Default Values
d_labels = 30
d_length = 16
d_in$    = "_ssb"
d_out$   = "_bas"
d_start  = 1000
d_delta  = 10
d_working$ = ""
d_work2$ = ""
d_over$  = ""
d_lang$  = "E"
d_ignore$ = "Y"


## Init Variables
DIM out_file$(100), command$(100), file$(100), in_file$(100), temp$(100)
DIM line_num$(10), line_delta$(10), argfile$(100), in$(1000), in2$(1000)
DIM label$(d_labels,d_length)
DIM label(d_labels)
DIM defn$(d_labels,d_length)
label_var = 1
define_var = 1
num_count = 0
file_num = 5
out_file$ = ""


##  This section adds support for the environment
##    variables (ENV_BIN).
##

t_in$ = GETENV$("SSBINPUT")
IF t_in$ <> "" THEN d_in$ = t_in$
t_out$ = GETENV$("SSBOUTPUT")
IF t_out$ <> "" THEN d_out$ = t_out$
t_start$ = GETENV$("SSBSTART")
IF t_start$ <> "" THEN d_start = t_start$
t_delta$ = GETENV$("SSBINC")
IF t_delta$ <> "" THEN d_delta = t_delta$
t_working$ = GETENV$("SSBWORK")
IF t_working$ <> "" THEN d_working$ = t_working$
t_work2$ = GETENV$("SSBWORK2")
IF t_work2$ <> "" THEN d_work2$ = t_work2$
t_over$ = GETENV$("SSBOVER")
IF t_over$ <> "" THEN d_over$ = t_over$
t_lang$ = GETENV$("SSBLANG")
IF t_lang$ <> "" THEN d_lang$ = t_lang$
t_ignore$ = GETENV$("SSBIGNORE_BLANKS")
IF t_ignore$ <> "" THEN d_ignore$ = t_ignore$

## Probably need to add some error checking here


## Add in code for language support
#INCLUDE ram1_ssblang_ssb

## If you change this, change the "centre" function to suit.
## The "winSize" variable will need adjusting to:
## width - border - border (Yes, border twice!) ND-272e.
OPEN #3,"con_300x160a75x10_32"
BORDER #3,2,4
PAPER #3,0 : INK #3,7 :  CLS #3

## Print opening Window
##  STRUCTURED SUPERBASIC FILTER
centre 3, lngarray$(1)
INK #3,2
##  Version number
centre 3, lngarray$(2)
##  By Timothy Swenson
centre 3, lngarray$(3)
PRINT #3
INK #3,4

## If Working Dir 2 is blank, set to Working Dir
IF d_work2$ = "" THEN d_work2$ = d_working$

## Get Command Line Args from Turbo
command$ = OPTION_CMD$

## Check for argument of only spaces
command$ = trim$(command$)

## Process commands or run interactively.
#INCLUDE ram1_commands_ssb

## Start of Main Routine

line_num = line_num_d
## PASS 1
INK #3,4
centre 3, lngarray$(17)

pass_one in_file$, file_num

line_num = line_num_d
PRINT #3
## PASS 2
centre 3, lngarray$(18)

num_count = 0
file_num = 5

## No error checking is necessary here as we have
## done it earlier.
OPEN_NEW #4,out_file$

pass_two in_file$, file_num

CLOSE #4
PRINT #3
## Program Done
centre 3, lngarray$(19)
PRINT #3,""
IF OPTION_CMD$="" THEN
  INK #3,7
   ## Hit Any Key
  centre 3, lngarray$(20)
  temp$ = INKEY$(#3,-1)
END IF
CLOSE #3
STOP


## The code for both pass1 and pass1 procedures have been
## broken out into two different files to make it easier
## to read and to maintain the code.

#INCLUDE ram1_ssbpass1_ssb

#INCLUDE ram1_ssbpass2_ssb

## ND-272e Added a couple of useful trim functions to strip
## leading and trailing spaces much easier than before.
#INCLUDE ram1_functions_ssb


## Function first_char
##   returns the location of the first non-white
##   space character.
DEFine FuNction first_char (a$)
   LOCal count
   count=0
@label2
   count=count+1
   IF count > LEN(a$) THEN RETurn 0
   IF a$(count)=" " THEN GO TO @label2
   RETurn count
END DEFine first_char

## Function upper$
##   Takes in input string and returns the
##   same string in all upper case letters.
DEF FuNction upper$(up$)
    LOCal x, temp

    FOR x = 1 TO LEN(up$)
       temp = CODE(up$(x))
       IF temp > 96 AND temp < 123 THEN up$(x)=CHR$(temp-32)
    END FOR x
    RETURN up$
END DEFine

## Function isnum
## Takes a string as input and determines if
## if it is a number.
##   Return Values:
##      0 = False (is not a number)
##      1 = True (is a number)

DEFine FuNCtion isnum (var$)
   LOCal x,y

   FOR x = 1 TO LEN(var$)
      y = CODE(var$(x))
      IF y < 48 OR y > 57 THEN RETURN 0
   END FOR x
   RETURN 1
END DEFine isnum

## Procedure abort_out
##   A separate procedure to neatly close all
##   of the files and exit the program.
##   Usually reserved for fatal errors.
DEF PROCedure abort_out

## Close output file before any possibility of deleting it

CLOSE #4

## If called with a Command Line string, then need
## to delete the output file.  This is necessary
## for SSBGO so it knows when SSB has failed with
## an error

IF OPTION_CMD$<>"" AND out_file$<>"" THEN DELETE out_file$

## Close out all open files

IF file_num = 5 THEN
    CLOSE #5
ELSE
    FOR x = 5 TO file_num
       CLOSE #x
    END FOR X
END IF

## If interactive, then pause for user input.
IF OPTION_CMD$<>"" THEN
    PRINT #3,""
    INK #3,7
    ## Hit Any Key
    centre 3, lngarray$(20)
    temp$ = INKEY$(#3,-1)
END IF
    CLOSE #3
    STOP

END DEFine abort_out
